#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Oct  8 21:30:21 2023

@author: davidscavnicky
"""

from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit
from numpy import pi

qreg_q = QuantumRegister(7, 'q')
creg_c = ClassicalRegister(3, 'c')
circuit = QuantumCircuit(qreg_q, creg_c)

circuit.rz(pi / 2, qreg_q[3])
circuit.sx(qreg_q[3])
circuit.rz(pi / 2, qreg_q[3])
circuit.cx(qreg_q[5], qreg_q[3])
circuit.rz(-pi / 4, qreg_q[3])
circuit.cx(qreg_q[1], qreg_q[3])
circuit.rz(pi / 4, qreg_q[3])
circuit.cx(qreg_q[5], qreg_q[3])
circuit.rz(-pi / 4, qreg_q[3])
circuit.cx(qreg_q[1], qreg_q[3])
circuit.rz(-pi / 4, qreg_q[1])
circuit.sx(qreg_q[1])
circuit.rz(-3 * pi / 4, qreg_q[3])
circuit.rz(pi / 4, qreg_q[5])
circuit.cx(qreg_q[5], qreg_q[3])
circuit.cx(qreg_q[3], qreg_q[5])
circuit.cx(qreg_q[5], qreg_q[3])
circuit.rz(pi / 4, qreg_q[3])
circuit.sx(qreg_q[3])
circuit.rz(-pi / 2, qreg_q[3])
circuit.cx(qreg_q[3], qreg_q[1])
circuit.rz(-pi / 2, qreg_q[1])
circuit.sx(qreg_q[3])
circuit.cx(qreg_q[3], qreg_q[1])
circuit.rz(pi / 4, qreg_q[1])
circuit.sx(qreg_q[3])
circuit.cx(qreg_q[3], qreg_q[1])
circuit.rz(-pi, qreg_q[1])
circuit.rz(-pi / 2, qreg_q[3])
circuit.sx(qreg_q[3])
circuit.x(qreg_q[5])
circuit.rz(-pi / 2, qreg_q[5])
circuit.cx(qreg_q[3], qreg_q[5])
circuit.sx(qreg_q[3])
circuit.rz(pi / 2, qreg_q[5])
circuit.cx(qreg_q[3], qreg_q[5])
circuit.rz(-pi / 2, qreg_q[3])
circuit.sx(qreg_q[3])
circuit.rz(3 * pi / 4, qreg_q[3])
circuit.cx(qreg_q[1], qreg_q[3])
circuit.rz(pi / 4, qreg_q[3])
circuit.rz(-pi, qreg_q[5])
circuit.sx(qreg_q[5])
circuit.rz(-3 * pi / 4, qreg_q[5])
circuit.cx(qreg_q[5], qreg_q[3])
circuit.rz(-pi / 4, qreg_q[3])
circuit.cx(qreg_q[1], qreg_q[3])
circuit.rz(3 * pi / 4, qreg_q[3])
circuit.sx(qreg_q[3])
circuit.rz(pi / 2, qreg_q[3])
circuit.cx(qreg_q[5], qreg_q[3])
circuit.cx(qreg_q[3], qreg_q[5])
circuit.cx(qreg_q[5], qreg_q[3])
circuit.cx(qreg_q[1], qreg_q[3])
circuit.rz(-pi / 4, qreg_q[3])
circuit.cx(qreg_q[1], qreg_q[3])
circuit.cx(qreg_q[3], qreg_q[5])
circuit.barrier(qreg_q[1], qreg_q[3], qreg_q[5])
circuit.measure(qreg_q[1], creg_c[0])
circuit.measure(qreg_q[3], creg_c[1])
circuit.measure(qreg_q[5], creg_c[2])